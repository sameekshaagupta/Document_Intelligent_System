# Document Intelligence Platform

A full-stack Document Intelligence Platform with RAG (Retrieval Augmented Generation) capabilities built using Django REST Framework and React. Upload documents, process them with AI, and ask intelligent questions about your document content.

## 🚀 Features

- **Document Upload & Processing**: Support for TXT, PDF, DOCX files
- **RAG Pipeline**: Advanced text chunking, embedding generation, and vector search
- **Intelligent Q&A**: Ask questions about your documents and get contextual answers
- **Modern UI**: Clean, responsive interface with Tailwind CSS
- **Real-time Processing**: Live status updates and progress indicators
- **Source Citations**: Answers include references to source chunks
- **Chat History**: Persistent conversation history
- **Vector Database**: ChromaDB integration for efficient similarity search

## 🛠️ Tech Stack

**Backend:**
- Django REST Framework
- ChromaDB (Vector Database)
- Sentence Transformers
- OpenAI API / LM Studio
- MySQL
- Python 3.8+

**Frontend:**
- React 18
- Tailwind CSS
- Axios
- Modern ES6+ JavaScript

## 📋 Prerequisites

Before you begin, ensure you have the following installed:

- **Python 3.8+** - [Download Python](https://www.python.org/downloads/)
- **Node.js 16+** - [Download Node.js](https://nodejs.org/)
- **MySQL 8.0+** - [Download MySQL](https://dev.mysql.com/downloads/)
- **Git** - [Download Git](https://git-scm.com/downloads)

## 🔧 Installation & Setup

### 1. Clone the Repository

```bash
git clone <repository-url>
cd document-intelligence-platform
```

### 2. Backend Setup

#### Step 1: Create Virtual Environment
```bash
cd backend
python -m venv venv

# On Windows
venv\Scripts\activate

# On macOS/Linux
source venv/bin/activate
```

#### Step 2: Install Python Dependencies
```bash
pip install -r requirements.txt
```

#### Step 3: Configure Environment Variables
Create a `.env` file in the `backend` directory:

```env
# Django Settings
SECRET_KEY=your-secret-key-here
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Database Configuration
DB_NAME=document_intelligence
DB_USER=root
DB_PASSWORD=your-mysql-password
DB_HOST=localhost
DB_PORT=3306

# OpenAI Configuration (Option 1)
OPENAI_API_KEY=your-openai-api-key

# LM Studio Configuration (Option 2 - Local LLM)
LM_STUDIO_BASE_URL=http://localhost:1234/v1
LM_STUDIO_MODEL=local-model

# File Upload Settings
MAX_UPLOAD_SIZE=52428800  # 50MB
ALLOWED_EXTENSIONS=txt,pdf,docx
```

#### Step 4: Setup MySQL Database
```sql
-- Connect to MySQL and create database
CREATE DATABASE document_intelligence;
CREATE USER 'doc_user'@'localhost' IDENTIFIED BY 'your-password';
GRANT ALL PRIVILEGES ON document_intelligence.* TO 'doc_user'@'localhost';
FLUSH PRIVILEGES;
```

#### Step 5: Run Database Migrations
```bash
python manage.py makemigrations
python manage.py migrate
```

#### Step 6: Create Superuser (Optional)
```bash
python manage.py createsuperuser
```

#### Step 7: Start Backend Server
```bash
python manage.py runserver
```

The backend will be available at `http://localhost:8000`

### 3. Frontend Setup

#### Step 1: Navigate to Frontend Directory
```bash
cd ../frontend
```

#### Step 2: Install Node.js Dependencies
```bash
npm install
```

#### Step 3: Configure Environment Variables
Create a `.env` file in the `frontend` directory:

```env
REACT_APP_API_BASE_URL=http://localhost:8000/api
REACT_APP_UPLOAD_MAX_SIZE=52428800
```

#### Step 4: Start Frontend Development Server
```bash
npm start
```

The frontend will be available at `http://localhost:3000`

## 🔑 API Configuration Options

### Option 1: OpenAI API (Recommended)
1. Get your API key from [OpenAI Platform](https://platform.openai.com/api-keys)
2. Add it to your backend `.env` file:
```env
OPENAI_API_KEY=sk-your-api-key-here
```

### Option 2: LM Studio (Local LLM)
1. Download and install [LM Studio](https://lmstudio.ai/)
2. Load a model (recommended: Llama 2 7B or similar)
3. Start the local server in LM Studio
4. Configure in `.env`:
```env
LM_STUDIO_BASE_URL=http://localhost:1234/v1
LM_STUDIO_MODEL=your-loaded-model-name
```

## 📁 Project Structure

```
document-intelligence-platform/
├── backend/
│   ├── document_intelligence/          # Django project settings
│   │   ├── __init__.py
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── documents/                      # Main Django app
│   │   ├── models.py                   # Database models
│   │   ├── views.py                    # API endpoints
│   │   ├── serializers.py              # Data serialization
│   │   ├── services.py                 # RAG engine & business logic
│   │   └── urls.py                     # URL routing
│   ├── media/                          # Uploaded files storage
│   ├── requirements.txt                # Python dependencies
│   └── manage.py                       # Django management script
├── frontend/
│   ├── public/                         # Static files
│   ├── src/
│   │   ├── components/                 # React components
│   │   │   ├── DocumentUpload.js       # File upload component
│   │   │   ├── DocumentList.js         # Document library
│   │   │   └── QuestionAnswer.js       # Q&A interface
│   │   ├── services/
│   │   │   └── api.js                  # API service functions
│   │   ├── App.js                      # Main React component
│   │   └── index.js                    # React entry point
│   ├── package.json                    # Node.js dependencies
│   └── tailwind.config.js              # Tailwind CSS configuration
└── README.md                           # This file
```

## 🚀 Usage Guide

### 1. Upload Documents
- Navigate to the Documents section
- Click "Upload Documents" or drag & drop files
- Supported formats: TXT, PDF, DOCX
- Wait for processing to complete

### 2. Ask Questions
- Go to the Q&A section
- Type your question about the uploaded documents
- Get intelligent answers with source references
- View conversation history

### 3. Manage Documents
- View all uploaded documents
- Check processing status
- Delete documents if needed

## 🧪 Testing

### Backend Tests
```bash
cd backend
python manage.py test
```

### Frontend Tests
```bash
cd frontend
npm test
```

## 📊 API Endpoints

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/api/documents/` | List all documents |
| POST | `/api/documents/upload/` | Upload new document |
| DELETE | `/api/documents/{id}/` | Delete document |
| POST | `/api/documents/ask/` | Ask question about documents |

### Example API Usage

#### Upload Document
```bash
curl -X POST \
  http://localhost:8000/api/documents/upload/ \
  -H 'Content-Type: multipart/form-data' \
  -F 'file=@/path/to/document.pdf'
```

#### Ask Question
```bash
curl -X POST \
  http://localhost:8000/api/documents/ask/ \
  -H 'Content-Type: application/json' \
  -d '{"question": "What is the main topic of the document?"}'
```

## 🔧 Configuration

### Database Settings
Modify `backend/document_intelligence/settings.py` for database configuration:

```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'document_intelligence'),
        'USER': os.getenv('DB_USER', 'root'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '3306'),
    }
}
```

### File Upload Limits
Adjust in `backend/document_intelligence/settings.py`:

```python
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB
```

## 🐛 Troubleshooting

### Common Issues

#### 1. Database Connection Error
```
django.db.utils.OperationalError: (2003, "Can't connect to MySQL server")
```
**Solution:** Ensure MySQL is running and credentials are correct in `.env`

#### 2. CORS Error in Frontend
```
Access to XMLHttpRequest blocked by CORS policy
```
**Solution:** Verify `CORS_ALLOWED_ORIGINS` in Django settings includes `http://localhost:3000`

#### 3. OpenAI API Error
```
openai.error.AuthenticationError: Incorrect API key
```
**Solution:** Check your OpenAI API key in `.env` file

#### 4. File Upload Size Error
```
Request Entity Too Large
```
**Solution:** Increase `FILE_UPLOAD_MAX_MEMORY_SIZE` in Django settings

### Performance Optimization

1. **Database Indexing**: Add indexes on frequently queried fields
2. **Caching**: Implement Redis for caching embeddings
3. **Async Processing**: Use Celery for background document processing
4. **CDN**: Use CDN for static file delivery in production

## 🚀 Deployment

### Production Deployment

#### Backend (Django)
1. Set `DEBUG=False` in production
2. Configure proper `ALLOWED_HOSTS`
3. Use production database (PostgreSQL recommended)
4. Setup static file serving with WhiteNoise or CDN
5. Use WSGI server like Gunicorn

#### Frontend (React)
1. Build production version: `npm run build`
2. Serve with Nginx or similar web server
3. Configure environment variables for production API

### Docker Deployment (Optional)

Create `docker-compose.yml`:

```yaml
version: '3.8'
services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DB_HOST=db
    depends_on:
      - db
  
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
  
  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: document_intelligence
      MYSQL_ROOT_PASSWORD: rootpassword
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  mysql_data:
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/new-feature`
3. Commit changes: `git commit -am 'Add new feature'`
4. Push to branch: `git push origin feature/new-feature`
5. Submit a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🆘 Support

If you encounter any issues or need help:

1. Check the [Troubleshooting](#troubleshooting) section
2. Search existing [GitHub Issues](link-to-issues)
3. Create a new issue with detailed information
4. Contact the development team

## 🔄 Version History

- **v1.0.0** - Initial release with basic RAG functionality
- **v1.1.0** - Added support for multiple document formats
- **v1.2.0** - Enhanced UI and chat history features

## 🙏 Acknowledgments

- OpenAI for their powerful language models
- ChromaDB team for the excellent vector database
- Django and React communities for amazing frameworks
- All contributors who helped improve this project

---

**Happy Document Intelligence! 🚀📚**